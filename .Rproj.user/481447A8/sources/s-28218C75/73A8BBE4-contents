
# Homework 10

*Tiffany Tung tt24548*

**This homework is due on Nov 27 at 11:59pm. Please submit as a PDF file on Canvas. Before submission, please re-run all cells by clicking "Kernel" and selecting "Restart & Run All."**


**Problem 1 (2 pts)**: Load the dataset `faithful` and look at it in Python. What type of object is it? What are the minimum and maximum values of the variables eruptions and waiting? 


```python
from IPython.core.interactiveshell import InteractiveShell

InteractiveShell.ast_node_interactivity = "all"
```


```python
import pandas as pd
faithful=pd.read_csv("https://vincentarelbundock.github.io/Rdatasets/csv/datasets/faithful.csv")
type(faithful)

min(faithful["eruptions"])
min(faithful["waiting"])
max(faithful["eruptions"])
min(faithful["waiting"])
```




    pandas.core.frame.DataFrame






    1.6






    43






    5.1






    43



**Problem 2 (4 pts)**: Now, import `numpy` and use functions from it to compute the mean, median, and variance for each variable. Finally, compute the correlation between the two variables using corrcoef (it will return a matrix). You can access individual variables in a dataframe using the `.` operator (e.g., `faithful.eruptions`).


```python
import numpy as np

np.mean(faithful.eruptions)
np.mean(faithful.waiting)

np.median(faithful.eruptions)
np.median(faithful.waiting)

np.var(faithful.eruptions)
np.var(faithful.waiting)

np.corrcoef(faithful.eruptions,faithful.waiting)

```




    3.4877830882352936






    70.897058823529406






    4.0






    76.0






    1.2979388904492861






    184.14381487889273






    array([[ 1.        ,  0.90081117],
           [ 0.90081117,  1.        ]])




```python
#example
faithful[faithful.waiting>60].shape
```




    (189, 3)




```python
#example
faithful[faithful.waiting>60].eruptions.mean()
#or np.mean(faithful[faithful.waiting>60].eruptions)
```




    4.1385873015873011



**Problem 3.2 (1 pts)**:  What is the standard deviation of the variable `eruptions`?


```python
np.std(faithful.eruptions)
```




    1.139271210225768



**Problem 3.3 (2 pts)**: What is the standard deviation of the variable `eruptions` when `waiting` is *less than* the median? 


```python
faithful[faithful["waiting"] <76].eruptions.std()
```




    0.95834433992368528



**Problem 3.4 (2 pts)**: What is the standard deviation of the variable `eruptions` when `waiting` is *greater than* the median? 


```python
faithful[faithful["waiting"] >76].eruptions.std()
```




    0.37305183407404358



*The standard deviation of 'eruptions' is 1.14.
The standard deviation of the variable `eruptions` when `waiting` is *less than* the median is 0.958 minutes.
The standard deviation of the variable 'eruptions' when 'waiting' is greater than the median is 0.373 minutes.*

**Question 4: (4 pts)** Both variables are measured in minutes. Create two new variables named `eruptions_h` and `waiting_h` that give each variable **in hours rather than minutes** and add them to the dataset `faithful`. To help get you started, I have given you code that creates a new variable called eruptions_minus_one. Instead, computes the requested transformation. Print out the first few rows of the updated dataset using `head()`.


```python
# update the code below
faithful['eruptions_h']=(faithful['eruptions']/60)
faithful['waiting_h']=(faithful['waiting']/60)
faithful.head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Unnamed: 0</th>
      <th>eruptions</th>
      <th>waiting</th>
      <th>eruptions_h</th>
      <th>waiting_h</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>3.600</td>
      <td>79</td>
      <td>0.06000</td>
      <td>1.316667</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>1.800</td>
      <td>54</td>
      <td>0.03000</td>
      <td>0.900000</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>3.333</td>
      <td>74</td>
      <td>0.05555</td>
      <td>1.233333</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>2.283</td>
      <td>62</td>
      <td>0.03805</td>
      <td>1.033333</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>4.533</td>
      <td>85</td>
      <td>0.07555</td>
      <td>1.416667</td>
    </tr>
  </tbody>
</table>
</div>



**Question 5.1 (1 pt)** Create a boxplot of each original variable (eruptions and waiting) using the `boxplot()` function from matplotlib


```python
import matplotlib.pyplot as plt
plt.boxplot(faithful['waiting'])
plt.show()
plt.boxplot(faithful['eruptions'])
plt.show()

```




    {'whiskers': [<matplotlib.lines.Line2D at 0x7fe7f8be55c0>,
      <matplotlib.lines.Line2D at 0x7fe7f8be5a58>],
     'caps': [<matplotlib.lines.Line2D at 0x7fe7f8be5e80>,
      <matplotlib.lines.Line2D at 0x7fe7f8bee2e8>],
     'boxes': [<matplotlib.lines.Line2D at 0x7fe7f8be5470>],
     'medians': [<matplotlib.lines.Line2D at 0x7fe7f8bee710>],
     'fliers': [<matplotlib.lines.Line2D at 0x7fe7f8beeb38>],
     'means': []}




![png](output_18_1.png)





    {'whiskers': [<matplotlib.lines.Line2D at 0x7fe7f8bb3c50>,
      <matplotlib.lines.Line2D at 0x7fe7f8b40128>],
     'caps': [<matplotlib.lines.Line2D at 0x7fe7f8b40518>,
      <matplotlib.lines.Line2D at 0x7fe7f8b40940>],
     'boxes': [<matplotlib.lines.Line2D at 0x7fe7f8bb3b00>],
     'medians': [<matplotlib.lines.Line2D at 0x7fe7f8b40d68>],
     'fliers': [<matplotlib.lines.Line2D at 0x7fe7f8b47208>],
     'means': []}




![png](output_18_3.png)


**Question 5.2 (1 pt)** Create a histogram of each original variable using the `hist()` function.


```python
plt.hist(faithful['waiting'])
plt.show()
plt.hist(faithful['eruptions'])
plt.show()

```




    (array([ 16.,  28.,  26.,  24.,   9.,  23.,  62.,  55.,  23.,   6.]),
     array([ 43. ,  48.3,  53.6,  58.9,  64.2,  69.5,  74.8,  80.1,  85.4,
             90.7,  96. ]),
     <a list of 10 Patch objects>)




![png](output_20_1.png)





    (array([ 45.,  36.,  13.,   3.,   4.,  12.,  29.,  52.,  54.,  24.]),
     array([ 1.6 ,  1.95,  2.3 ,  2.65,  3.  ,  3.35,  3.7 ,  4.05,  4.4 ,
             4.75,  5.1 ]),
     <a list of 10 Patch objects>)




![png](output_20_3.png)


**Question 5.3 (1 pt)** Create a scatterplot by plotting both variables against each other using the `plot()` function. Note that plot takes two arguments: the x-axis variable and the y-axis variable. 


```python
plt.scatter(faithful["eruptions"],faithful["waiting"])
```




    <matplotlib.collections.PathCollection at 0x7fe804588dd8>




![png](output_22_1.png)


**Question 6 (1 pt)** Load the tips dataset from `seaborn` (a plotting package we will use later). Have a look at it below. Notice what happens when you run describe. Which variables were dropped? Take a look at the pandas groupby function and also look at the neat seaborn plots!


```python
import pandas as pd
import seaborn as sns

tips = sns.load_dataset('tips')
iris = sns.load_dataset('iris')
tips.head()
tips.describe()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>total_bill</th>
      <th>tip</th>
      <th>sex</th>
      <th>smoker</th>
      <th>day</th>
      <th>time</th>
      <th>size</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>16.99</td>
      <td>1.01</td>
      <td>Female</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>1</th>
      <td>10.34</td>
      <td>1.66</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>3</td>
    </tr>
    <tr>
      <th>2</th>
      <td>21.01</td>
      <td>3.50</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>23.68</td>
      <td>3.31</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>4</th>
      <td>24.59</td>
      <td>3.61</td>
      <td>Female</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>






<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>total_bill</th>
      <th>tip</th>
      <th>size</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>244.000000</td>
      <td>244.000000</td>
      <td>244.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>19.785943</td>
      <td>2.998279</td>
      <td>2.569672</td>
    </tr>
    <tr>
      <th>std</th>
      <td>8.902412</td>
      <td>1.383638</td>
      <td>0.951100</td>
    </tr>
    <tr>
      <th>min</th>
      <td>3.070000</td>
      <td>1.000000</td>
      <td>1.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>13.347500</td>
      <td>2.000000</td>
      <td>2.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>17.795000</td>
      <td>2.900000</td>
      <td>2.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>24.127500</td>
      <td>3.562500</td>
      <td>3.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>50.810000</td>
      <td>10.000000</td>
      <td>6.000000</td>
    </tr>
  </tbody>
</table>
</div>



*All the categorical variables, 'sex', 'smoker', 'day' and 'time', are dropped*


```python
#using pandas groupby functionality
groups = tips.groupby('sex')
groups['tip'].mean()
```




    sex
    Male      3.089618
    Female    2.833448
    Name: tip, dtype: float64




```python
sns.pairplot(iris, hue='species');
```


![png](output_27_0.png)



```python
sns.jointplot("total_bill", "tip", data=tips, kind='reg');
```

    /opt/jupyterhub/pyvenv/lib/python3.6/site-packages/matplotlib/axes/_axes.py:6571: UserWarning: The 'normed' kwarg is deprecated, and has been replaced by the 'density' kwarg.
      warnings.warn("The 'normed' kwarg is deprecated, and has been "



![png](output_28_1.png)

