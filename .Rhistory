install.packages("blogdown")
blogdown::install_hugo()
blogdown::serve_site()
blogdown::serve_site()
blogdown::new_site()
blogdown::serve_site()
install.packages("tidyverse")
blogdown::serve_site()
git add .
git commit -m "some message"
blogdown::serve_site()
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
blogdown::serve_site()
install.packages("tidyr")
install.packages("dplyr")
install.packages("xm12")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
blogdown::serve_site()
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
install.packages("rmarkdown")
install.packages("tidyverse")
blogdown::serve_site()
install.packages("blogdown")
blogdown::serve_site()
blogdown::serve_site()
install.packages("sandwich")
blogdown::serve_site()
install.packages("lmtest")
blogdown::serve_site()
install.packages("plotROC")
blogdown::serve_site()
install.packages("pROC")
blogdown::serve_site()
install.packages("glmnet")
blogdown::serve_site()
install.packages("glmnet")
blogdown::serve_site()
install.packages("glmnet")
install.packages("glmnet")
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
# this hook is used only when the linewidth option is not NULL
if (!is.null(n <- options$linewidth)) {
x = knitr:::split_lines(x)
# any lines wider than n should be wrapped
if (any(nchar(x) > n)) x = strwrap(x, width = n)
x = paste(x, collapse = '\n')
}
hook_output(x, options)
})
knitr::opts_chunk$set(echo = TRUE, eval = TRUE,fig.align="center",warning=FALSE,message=FALSE,fig.width=8, fig.height=5, linewidth=60)
options(tibble.width = 100,width = 100)
library(tidyverse)
install.packages("glmnet")
install.packages("glmnet")
library(glmnet)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
install.packages("reticulate")
library(reticulate)
library(reticulate)
from IPython.core.interactiveshell import InteractiveShell
library(reticulate)
import pandas as pd
library(reticulate)
faithful=pd.read_csv("https://vincentarelbundock.github.io/Rdatasets/csv/datasets/faithful.csv")
library(reticulate)
min(faithful["eruptions"])
min(faithful["waiting"])
max(faithful["eruptions"])
min(faithful["waiting"])
library(reticulate)
min(faithful["eruptions"])
min(faithful["waiting"])
max(faithful["eruptions"])
min(faithful["waiting"])
library(reticulate)
my_seq1 = "ATCATCATG"
my_seq2 = "CAGCCCAATCAGGCTCTACTGCCACTAAACTTACGCAGGATATATTTACGCCGACGTACT"
result = {}
for i in range(0, len(my_seq1)-2):
library(reticulate)
use_condaenv("r-reticulate")
install.packages("AnaCoDa")
library(reticulate)
use_condaenv("r-reticulate")
install.packages("anaconda")
reticulate::repl_python()
